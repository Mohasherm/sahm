@page "/TankOperation/{Id:int}"
@inject NavigationManager navManager
@inject TankService ser
@inject CenterService cSer
@inject IStringLocalizer<ApplicationResource> localizer
@inject IJSRuntime js

<AuthorizeView Context="aContext">
    <Authorized>
        <PageTitle>@ApplicationResource.TankInOut</PageTitle>

        <div class="panel panel-info">
            <div class="panel-heading d-flex justify-content-between">
                <h5>@ApplicationResource.TankInOut</h5>
            </div>
            <div class="panel-body">
                <div class="table-responsive nomargin">
                    <EditForm Model="tankOperationDTO" OnSubmit="Save">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label>@ApplicationResource.operationType</label>
                            <InputSelect class="form-control mb-2" @bind-Value="operationType">
                                <option value="">....</option>
                                <option value="in">@ApplicationResource.In</option>
                                <option value="out">@ApplicationResource.Out</option>
                            </InputSelect>
                            @if (!string.IsNullOrEmpty(operationType))
                            {
                                <label>@ApplicationResource.Qty</label>
                                <InputNumber class="form-control mb-2" @bind-Value="qty"></InputNumber>

                                <div class="form-group d-flex justify-content-center">
                                    <button class="btn mx-2 btn-submit" type="submit">@ApplicationResource.save</button>
                                    <button class="btn btn-cancel" @onclick="Cancel">@ApplicationResource.Cancel</button>
                                </div>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger" role="alert">
            @ApplicationResource.you_are_not_authoriazed
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int Id { get; set; }
    private TankOperationDTO? tankOperationDTO { get; set; }
    protected string operationType = string.Empty;
    protected double qty = 0;

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        {
            tankOperationDTO = new();
        }

    }

    async void Save()
    {
        bool result = false;
        if (string.IsNullOrEmpty(operationType))
        {
            await js.InvokeVoidAsync("alert", @ApplicationResource.ChooseOpType);
            return;
        }
        if (qty <= 0)
        {
            await js.InvokeVoidAsync("alert", @ApplicationResource.qtyError);
            qty = 0;
            return;
        }
        if (Id > 0)
        {
            if (operationType.Equals("in"))
            {
                tankOperationDTO.InQTY = qty;
                tankOperationDTO.OutQTY = 0;
            }
            else
            {
                tankOperationDTO.InQTY = 0;
                tankOperationDTO.OutQTY = qty;
            }
            tankOperationDTO.Tank_Id = Id;
            tankOperationDTO.Date = DateTime.UtcNow;
            result = await ser.InsertOperation(tankOperationDTO);

            if (result)
            {
                TankQTYUpdateDTO tankQTY = new();
                tankQTY.Id = Id;
                tankQTY.QTY = qty;
                tankQTY.OperationType = operationType;
                var res = await ser.UpdateTankQTY(tankQTY, Id);
                if (res)
                {
                    navManager.NavigateTo("/Tanks");
                }
                else
                {
                    await js.InvokeVoidAsync("alert", @ApplicationResource.there_is_a_problem);
                }
            }
            else
            {
                await js.InvokeVoidAsync("alert", @ApplicationResource.there_is_a_problem);
            }
        }
    }

    void Cancel()
    {
        navManager.NavigateTo("/Tanks");
    }

}