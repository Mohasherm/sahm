@page "/ChangePassword"
@inject AuthenticationHttpClient Http
@inject NavigationManager NavigationManager



<AuthorizeView>
    <Authorized>
        <text class="mb-4">@ApplicationResource.Change_Password...</text>
        <EditForm Context="eContext" Model="@changePasswordDTO" OnValidSubmit="@change">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <InputText class="form-control" id="CurrentPassword" @bind-Value="changePasswordDTO.CurrentPassword" placeholder="@ApplicationResource.Current_Password" />
            </div>

            <div class="mb-3">
                <InputText class="form-control" id="NewPassword" @bind-Value="changePasswordDTO.NewPassword" placeholder="New Password" />
            </div>

            <div class="mb-3">
                <InputText class="form-control" id="ConfirmNewPassword" @bind-Value="changePasswordDTO.ConfirmNewPassword" placeholder="@ApplicationResource.Confirm_New_Password" />
            </div>
            @if (!changing)
            {
                <button class="btn btn-primary" type="submit">@ApplicationResource.save</button>
            }
            else
            {    
                <p>changing password...</p>
            }
        </EditForm>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { set; get; }
    AuthenticationState user;
    private bool changing;
    public ChangePasswordDTO changePasswordDTO { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await authenticationState;
        if (user != null && user.User.Identity.IsAuthenticated)
        {
            changePasswordDTO.Email = user.User.Identity.Name;
        }
    }
    async void change()
    {
        changing = true;
        var result = await Http.ChangePassword(changePasswordDTO);
        NavigationManager.NavigateTo("/");
        changing = false;

    }
}