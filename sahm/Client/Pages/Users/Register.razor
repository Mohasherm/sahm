@page "/register"
@using System.Net.Http.Headers
@inject AuthenticationHttpClient Http
@inject JobTitleService jobTitleService
@inject IJSRuntime js
@inject HttpClient http

<AuthorizeView Context="aContext">
    <Authorized>
        <PageTitle>@ApplicationResource.EmployeeAdd</PageTitle>

        <div class="panel panel-info">
            <div class="panel-heading d-flex justify-content-between">
                <h5>  @ApplicationResource.EmployeeAdd</h5>
            </div>
            <div class="panel-body">
                <div class="table-responsive nomargin">

                    @if (!succeeded)
                    {
                        <EditForm Model="@userRegisterDTO" OnValidSubmit="@register">
                            <CustomValidation @ref="customValidation" />
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <InputText class="form-control" id="Name" @bind-Value="userRegisterDTO.Name" placeholder="@ApplicationResource.Name" />
                            </div>

                            <div class="mb-3">
                                <InputText class="form-control" id="Email" @bind-Value="userRegisterDTO.Email" placeholder="@ApplicationResource.Email" />
                            </div>

                            <div class="mb-3">
                                <input type="password" class="form-control" id="Password" @bind-value="userRegisterDTO.Password" placeholder="@ApplicationResource.Password" />
                            </div>

                            <div class="mb-3">
                                <input type="password" class="form-control" id="ConfirmPassword" @bind-value="userRegisterDTO.ConfirmPassword" placeholder="@ApplicationResource.ConfirmPassword" />
                            </div>


                            @if (lst_JobTitleDTO != null)
                            {
                                <div class="mb-3">
                                    <InputSelect class="form-control" id="JobTitle" @bind-Value="userRegisterDTO.JobTitle">
                                        <option value="">@ApplicationResource.Choose_JobeTitle</option>
                                        @foreach (var item in lst_JobTitleDTO)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                            }


                            <div class="mb-3">
                                <InputText class="form-control" id="Mobile" @bind-Value="userRegisterDTO.Mobile" placeholder="+966.." />
                            </div>

                            <div class="mb-3">
                                <InputFile class="custom-file-input" OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile" />
                            </div>

                            @if (!registering)
                            {
                                <button class="btn mx-2 btn-submit" type="submit">@ApplicationResource.save</button>
                            }
                            else
                            {
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                </div>
                            }
                        </EditForm>
                    }
                    else
                    {
                        <p>
                            @ApplicationResource.Registration_successful @*<a href="login">Click here to login</a>*@.
                        </p>
                    }
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {
    private UserRegisterDTO userRegisterDTO = new();
    private CustomValidation? customValidation;
    private bool registering;
    private bool succeeded;
    private List<JobTitleDTO> lst_JobTitleDTO = new();

    private long MaxFileSize = long.MaxValue;

    protected override async Task OnInitializedAsync()
    {
        lst_JobTitleDTO = await jobTitleService.GetAll();
    }

    private async Task register()
    {

        if (userRegisterDTO.image.base64data is null)
        {
            await js.InvokeVoidAsync("alert", @ApplicationResource.choose_photo);
            return;
        }

        registering = true;

        var result = await Http.RegisterUser(userRegisterDTO);

        if (result.Succeeded)
        {
            succeeded = true;
        }
        else
        {
            customValidation?.ClearErrors();
            var errors = new Dictionary<string, List<string>>();
            errors.Add("", result.Errors.ToList());
            customValidation?.DisplayErrors(errors);
        }

        registering = false;
    }




    async Task OnChange(InputFileChangeEventArgs e)
    {
        ImageFileDTO image = new();
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            image = new ImageFileDTO
                {
                    base64data = Convert.ToBase64String(buf),
                    contentType = file.ContentType,
                    fileName = file.Name
                }; // convert to a base64 string!!
        }
        userRegisterDTO.image = image;
    }
}