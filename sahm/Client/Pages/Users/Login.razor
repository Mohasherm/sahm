@page "/login"
@inject AuthenticationHttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime js
<PageTitle>@ApplicationResource.signe_in</PageTitle>
<div class="panel panel-info">
    <div class="panel-heading d-flex justify-content-between">
        <h5>  @ApplicationResource.signe_in</h5>
    </div>
    <div class="panel-body">
        <div class="table-responsive nomargin">
            <EditForm Model="@userLoginDTO" OnValidSubmit="@HandleValidSubmit">
                <CustomValidation @ref="customValidation" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <InputText class="form-control" id="Email" @bind-Value="userLoginDTO.Email" placeholder="@ApplicationResource.Email" />
                </div>

                <div class="mb-3">
                    <InputText class="form-control" id="Password" @bind-Value="userLoginDTO.Password" placeholder="@ApplicationResource.Password" />
                </div>

                @if (!loggingIn)
                {
                    <button class="btn mx-2 btn-submit" type="submit">@ApplicationResource.signe_in</button>
                }
                else
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    private UserLoginDTO userLoginDTO = new();
    private CustomValidation? customValidation;
    private bool loggingIn;

    private async Task HandleValidSubmit()
    {
        loggingIn = true;

        var result = await Http.LoginUser(userLoginDTO);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/");
            await js.InvokeVoidAsync("removeModal");
        }
        else
        {
            customValidation?.ClearErrors();
            var errors = new Dictionary<string, List<string>>();
            errors.Add("", new List<string> { result.Message });
            customValidation?.DisplayErrors(errors);
            await js.InvokeVoidAsync("removeModal");
        }

        loggingIn = false;
    }
}