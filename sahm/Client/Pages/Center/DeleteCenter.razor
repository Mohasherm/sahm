@page "/DeleteCenter/{Id:int}"
@inject CenterService centerService
@inject AuthenticationHttpClient user
@inject NavigationManager navManager
@inject IJSRuntime js

<AuthorizeView>
    <Authorized>
        <PageTitle>Delete</PageTitle>

        @if (centerDTO != null )
        {
            <div class="card">
                <div class="card-header">
                    Center Info
                </div>
                <div class="card-body">
                    <table class="table">
                        <tbody>
                            <tr>
                                <td><strong>Name</strong></td>
                                <td>@centerDTO.Name</td>
                            </tr>
                            <tr>
                                <td><strong>UserName</strong></td>
                                <td>@centerDTO.UserName</td>
                            </tr>
                            <tr>
                                <td><strong>Type</strong></td>
                                <td>@centerDTO.Type</td>
                            </tr>

                        </tbody>
                    </table>
                    <div class="form-group d-flex justify-content-center">
                        <button class="btn btn-danger mx-2" @onclick="Delete">Delete</button>
                        <button class="btn btn-dark" @onclick="Cancel">Cancel</button>
                    </div>
                </div>
            </div>
            
        }
        else
        {
            <div class="alert alert-info" role="alert">
                no data found
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger" role="alert">
            you are not authoriazed
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int Id { get; set; }
    private CenterDTO? centerDTO = new();
    private List<UserDTO>? lst_Users { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        {
            lst_Users = await user.GetUsers();
            centerDTO = await centerService.GetById(Id);
        }

    }
    async void Delete()
    {
        if (centerDTO != null)
        {
           var result = await centerService.Delete(Id);
            if (result)
            {
                navManager.NavigateTo("/Centers");
            }
            else
            {
                await js.InvokeVoidAsync("alert", "there is a problem");
            }
        }
    }
    void Cancel()
    {
        navManager.NavigateTo("/Centers");
    }
}
